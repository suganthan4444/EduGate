{"ast":null,"code":"//react-project/src/api.js\nimport axios from 'axios';\nexport const fetchSessionData = async () => {\n  try {\n    const response = await api.get('/fetch-session-data/');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching session data:', error);\n    return null;\n  }\n};\nconst api = axios.create({\n  baseURL: 'http://127.0.0.1:8000/api',\n  // Updated base URL with /api for routes\n  timeout: 2 * 60 * 1000,\n  // 10-second timeout for requests\n  withCredentials: true\n});\n\n// Add a request interceptor\napi.interceptors.request.use(config => {\n  // Modify request config here if needed\n  return config;\n}, error => {\n  // Handle request errors\n  return Promise.reject(error);\n});\n\n// Add a response interceptor\napi.interceptors.response.use(response => {\n  // Transform response data here if needed\n  return response;\n}, error => {\n  // Handle response errors\n  if (error.response) {\n    // Server responded with a status other than 2xx\n    console.error(`API Error: ${error.response.status} - ${error.response.data}`);\n  } else if (error.request) {\n    // No response received\n    console.error('API Error: No response received');\n  } else {\n    // Error setting up request\n    console.error(`API Error: ${error.message}`);\n  }\n  return Promise.reject(error);\n});\nexport async function checkUniqueFields(email, mobile_no, username) {\n  try {\n    const response = await api.post('/check-unique-fields/', {\n      email,\n      mobile_no,\n      username\n    });\n    const data = response.data;\n\n    // Check if any fields are not unique\n    const isEmailUnique = data.email;\n    const isMobileNoUnique = data.mobile_no;\n    const isUsernameUnique = data.username;\n\n    // Construct the result object\n    return {\n      email: {\n        isUnique: isEmailUnique,\n        message: isEmailUnique ? '' : 'Email is already in use.'\n      },\n      mobile_no: {\n        isUnique: isMobileNoUnique,\n        message: isMobileNoUnique ? '' : 'Mobile number is already in use.'\n      },\n      username: {\n        isUnique: isUsernameUnique,\n        message: isUsernameUnique ? '' : 'Username is already in use.'\n      }\n    };\n  } catch (error) {\n    console.error('Error checking unique fields:', error);\n    throw error; // Handle the error or return an appropriate error response\n  }\n}\nexport default api;","map":{"version":3,"names":["axios","fetchSessionData","response","api","get","data","error","console","create","baseURL","timeout","withCredentials","interceptors","request","use","config","Promise","reject","status","message","checkUniqueFields","email","mobile_no","username","post","isEmailUnique","isMobileNoUnique","isUsernameUnique","isUnique"],"sources":["D:/Sugu/Code/Projects/Project EduGate/react-project/src/api.js"],"sourcesContent":["//react-project/src/api.js\r\nimport axios from 'axios';\r\n\r\nexport const fetchSessionData = async () => {\r\n    try {\r\n        const response = await api.get('/fetch-session-data/');\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error fetching session data:', error);\r\n        return null;\r\n    }\r\n};\r\n\r\nconst api = axios.create({\r\n    baseURL: 'http://127.0.0.1:8000/api', // Updated base URL with /api for routes\r\n    timeout: 2*60*1000, // 10-second timeout for requests\r\n    withCredentials: true,\r\n});\r\n\r\n// Add a request interceptor\r\napi.interceptors.request.use(\r\n    (config) => {\r\n        // Modify request config here if needed\r\n        return config;\r\n    },\r\n    (error) => {\r\n        // Handle request errors\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// Add a response interceptor\r\napi.interceptors.response.use(\r\n    (response) => {\r\n        // Transform response data here if needed\r\n        return response;\r\n    },\r\n    (error) => {\r\n        // Handle response errors\r\n        if (error.response) {\r\n            // Server responded with a status other than 2xx\r\n            console.error(`API Error: ${error.response.status} - ${error.response.data}`);\r\n        } else if (error.request) {\r\n            // No response received\r\n            console.error('API Error: No response received');\r\n        } else {\r\n            // Error setting up request\r\n            console.error(`API Error: ${error.message}`);\r\n        }\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n\r\nexport async function checkUniqueFields(email, mobile_no, username) {\r\n    try {\r\n        const response = await api.post('/check-unique-fields/', {\r\n            email,\r\n            mobile_no,\r\n            username,\r\n        });\r\n        \r\n        const data = response.data;\r\n\r\n        // Check if any fields are not unique\r\n        const isEmailUnique = data.email;\r\n        const isMobileNoUnique = data.mobile_no;\r\n        const isUsernameUnique = data.username;\r\n\r\n        // Construct the result object\r\n        return {\r\n            email: { isUnique: isEmailUnique, message: isEmailUnique ? '' : 'Email is already in use.' },\r\n            mobile_no: { isUnique: isMobileNoUnique, message: isMobileNoUnique ? '' : 'Mobile number is already in use.' },\r\n            username: { isUnique: isUsernameUnique, message: isUsernameUnique ? '' : 'Username is already in use.' },\r\n        };\r\n        \r\n    } catch (error) {\r\n        console.error('Error checking unique fields:', error);\r\n        throw error; // Handle the error or return an appropriate error response\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default api;\r\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,gBAAgB,GAAG,MAAAA,CAAA,KAAY;EACxC,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,GAAG,CAACC,GAAG,CAAC,sBAAsB,CAAC;IACtD,OAAOF,QAAQ,CAACG,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,OAAO,IAAI;EACf;AACJ,CAAC;AAED,MAAMH,GAAG,GAAGH,KAAK,CAACQ,MAAM,CAAC;EACrBC,OAAO,EAAE,2BAA2B;EAAE;EACtCC,OAAO,EAAE,CAAC,GAAC,EAAE,GAAC,IAAI;EAAE;EACpBC,eAAe,EAAE;AACrB,CAAC,CAAC;;AAEF;AACAR,GAAG,CAACS,YAAY,CAACC,OAAO,CAACC,GAAG,CACvBC,MAAM,IAAK;EACR;EACA,OAAOA,MAAM;AACjB,CAAC,EACAT,KAAK,IAAK;EACP;EACA,OAAOU,OAAO,CAACC,MAAM,CAACX,KAAK,CAAC;AAChC,CACJ,CAAC;;AAED;AACAH,GAAG,CAACS,YAAY,CAACV,QAAQ,CAACY,GAAG,CACxBZ,QAAQ,IAAK;EACV;EACA,OAAOA,QAAQ;AACnB,CAAC,EACAI,KAAK,IAAK;EACP;EACA,IAAIA,KAAK,CAACJ,QAAQ,EAAE;IAChB;IACAK,OAAO,CAACD,KAAK,CAAE,cAAaA,KAAK,CAACJ,QAAQ,CAACgB,MAAO,MAAKZ,KAAK,CAACJ,QAAQ,CAACG,IAAK,EAAC,CAAC;EACjF,CAAC,MAAM,IAAIC,KAAK,CAACO,OAAO,EAAE;IACtB;IACAN,OAAO,CAACD,KAAK,CAAC,iCAAiC,CAAC;EACpD,CAAC,MAAM;IACH;IACAC,OAAO,CAACD,KAAK,CAAE,cAAaA,KAAK,CAACa,OAAQ,EAAC,CAAC;EAChD;EACA,OAAOH,OAAO,CAACC,MAAM,CAACX,KAAK,CAAC;AAChC,CACJ,CAAC;AAGD,OAAO,eAAec,iBAAiBA,CAACC,KAAK,EAAEC,SAAS,EAAEC,QAAQ,EAAE;EAChE,IAAI;IACA,MAAMrB,QAAQ,GAAG,MAAMC,GAAG,CAACqB,IAAI,CAAC,uBAAuB,EAAE;MACrDH,KAAK;MACLC,SAAS;MACTC;IACJ,CAAC,CAAC;IAEF,MAAMlB,IAAI,GAAGH,QAAQ,CAACG,IAAI;;IAE1B;IACA,MAAMoB,aAAa,GAAGpB,IAAI,CAACgB,KAAK;IAChC,MAAMK,gBAAgB,GAAGrB,IAAI,CAACiB,SAAS;IACvC,MAAMK,gBAAgB,GAAGtB,IAAI,CAACkB,QAAQ;;IAEtC;IACA,OAAO;MACHF,KAAK,EAAE;QAAEO,QAAQ,EAAEH,aAAa;QAAEN,OAAO,EAAEM,aAAa,GAAG,EAAE,GAAG;MAA2B,CAAC;MAC5FH,SAAS,EAAE;QAAEM,QAAQ,EAAEF,gBAAgB;QAAEP,OAAO,EAAEO,gBAAgB,GAAG,EAAE,GAAG;MAAmC,CAAC;MAC9GH,QAAQ,EAAE;QAAEK,QAAQ,EAAED,gBAAgB;QAAER,OAAO,EAAEQ,gBAAgB,GAAG,EAAE,GAAG;MAA8B;IAC3G,CAAC;EAEL,CAAC,CAAC,OAAOrB,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrD,MAAMA,KAAK,CAAC,CAAC;EACjB;AACJ;AAKA,eAAeH,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}