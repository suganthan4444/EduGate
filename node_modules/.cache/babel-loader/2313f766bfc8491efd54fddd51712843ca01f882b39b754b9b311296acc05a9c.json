{"ast":null,"code":"var _jsxFileName = \"D:\\\\Sugu\\\\Code\\\\Projects\\\\Project EduGate\\\\react-project\\\\src\\\\LearnerProfile.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport './LearnerProfile.css';\nimport api from './api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LearnerProfile() {\n  _s();\n  const [learnerData, setLearnerData] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [editableFields, setEditableFields] = useState({\n    email: false,\n    mobile_no: false,\n    username: false,\n    highest_qualification: false\n  });\n  const [updatedFields, setUpdatedFields] = useState({\n    email: '',\n    mobile_no: '',\n    username: '',\n    highest_qualification: ''\n  });\n  const [csrfToken, setCsrfToken] = useState('');\n  useEffect(() => {\n    async function fetchCsrfToken() {\n      try {\n        const response = await api.get('/get-learner-csrf-token/');\n        setCsrfToken(response.data.csrfToken);\n      } catch (error) {\n        console.error('Error fetching CSRF token:', error);\n        // Handle error if unable to fetch CSRF token\n      }\n    }\n    fetchCsrfToken();\n  }, []);\n  useEffect(() => {\n    async function fetchProfileData() {\n      try {\n        const learnerId = sessionStorage.getItem('learnerId');\n        const response = await api.get(`/learner-profile/?learnerId=${learnerId}`, {\n          headers: {\n            'X-CSRFToken': csrfToken\n          }\n        });\n        setLearnerData(response.data);\n      } catch (err) {\n        setError('Failed to fetch profile data. Please try again.');\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchProfileData();\n  }, [csrfToken]);\n  const handleEdit = field => {\n    setEditableFields({\n      ...editableFields,\n      [field]: true\n    });\n  };\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setUpdatedFields({\n      ...updatedFields,\n      [name]: value\n    });\n  };\n  const handleSubmit = async () => {\n    try {\n      const learnerId = sessionStorage.getItem('learnerId');\n      await api.patch(`/update-learner-profile/${learnerId}`, updatedFields, {\n        headers: {\n          'X-CSRFToken': csrfToken\n        }\n      });\n      setLearnerData({\n        ...learnerData,\n        ...updatedFields\n      });\n      setEditableFields({\n        email: false,\n        mobile_no: false,\n        username: false,\n        highest_qualification: false\n      });\n    } catch (err) {\n      console.error('Error updating profile:', err);\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 16\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"profile-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"My Profile\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this), Object.entries(learnerData).map(([key, value]) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"profile-field\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: key.replace('_', ' ')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 21\n      }, this), editableFields[key] ? /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: key,\n        value: updatedFields[key] || value,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: value,\n        readOnly: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 25\n      }, this), !editableFields[key] && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleEdit(key),\n        children: [\"Edit \", key.replace('_', ' ')]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 25\n      }, this)]\n    }, key, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      children: \"Submit Changes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 9\n  }, this);\n}\n_s(LearnerProfile, \"idFGF4y1Tmjm8YkgJCWovvmU2m8=\");\n_c = LearnerProfile;\nexport default LearnerProfile;\nvar _c;\n$RefreshReg$(_c, \"LearnerProfile\");","map":{"version":3,"names":["React","useEffect","useState","api","jsxDEV","_jsxDEV","LearnerProfile","_s","learnerData","setLearnerData","loading","setLoading","error","setError","editableFields","setEditableFields","email","mobile_no","username","highest_qualification","updatedFields","setUpdatedFields","csrfToken","setCsrfToken","fetchCsrfToken","response","get","data","console","fetchProfileData","learnerId","sessionStorage","getItem","headers","err","handleEdit","field","handleChange","e","name","value","target","handleSubmit","patch","children","fileName","_jsxFileName","lineNumber","columnNumber","className","Object","entries","map","key","replace","type","onChange","readOnly","onClick","_c","$RefreshReg$"],"sources":["D:/Sugu/Code/Projects/Project EduGate/react-project/src/LearnerProfile.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './LearnerProfile.css';\r\nimport api from './api';\r\n\r\nfunction LearnerProfile() {\r\n    const [learnerData, setLearnerData] = useState({});\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [editableFields, setEditableFields] = useState({\r\n        email: false,\r\n        mobile_no: false,\r\n        username: false,\r\n        highest_qualification: false,\r\n    });\r\n    const [updatedFields, setUpdatedFields] = useState({\r\n        email: '',\r\n        mobile_no: '',\r\n        username: '',\r\n        highest_qualification: '',\r\n    });\r\n    const [csrfToken, setCsrfToken] = useState('');\r\n\r\n    useEffect(() => {\r\n        async function fetchCsrfToken() {\r\n            try {\r\n                const response = await api.get('/get-learner-csrf-token/');\r\n                setCsrfToken(response.data.csrfToken);\r\n            } catch (error) {\r\n                console.error('Error fetching CSRF token:', error);\r\n                // Handle error if unable to fetch CSRF token\r\n            }\r\n        }\r\n\r\n        fetchCsrfToken();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        async function fetchProfileData() {\r\n            try {\r\n                const learnerId = sessionStorage.getItem('learnerId');\r\n                const response = await api.get(`/learner-profile/?learnerId=${learnerId}`,{headers: {\r\n                    'X-CSRFToken': csrfToken,\r\n                }});\r\n                setLearnerData(response.data);\r\n            } catch (err) {\r\n                setError('Failed to fetch profile data. Please try again.');\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        }\r\n\r\n        fetchProfileData();\r\n    }, [csrfToken]);\r\n\r\n    const handleEdit = (field) => {\r\n        setEditableFields({ ...editableFields, [field]: true });\r\n    };\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setUpdatedFields({ ...updatedFields, [name]: value });\r\n    };\r\n\r\n    const handleSubmit = async () => {\r\n        try {\r\n            const learnerId = sessionStorage.getItem('learnerId');\r\n            await api.patch(`/update-learner-profile/${learnerId}`, updatedFields, {\r\n                headers: {\r\n                    'X-CSRFToken': csrfToken,\r\n                },\r\n            });\r\n            setLearnerData({ ...learnerData, ...updatedFields });\r\n            setEditableFields({\r\n                email: false,\r\n                mobile_no: false,\r\n                username: false,\r\n                highest_qualification: false,\r\n            });\r\n        } catch (err) {\r\n            console.error('Error updating profile:', err);\r\n        }\r\n    };\r\n\r\n    if (loading) {\r\n        return <div>Loading...</div>;\r\n    }\r\n\r\n    if (error) {\r\n        return <div>{error}</div>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"profile-container\">\r\n            <h2>My Profile</h2>\r\n            {Object.entries(learnerData).map(([key, value]) => (\r\n                <div key={key} className=\"profile-field\">\r\n                    <label>{key.replace('_', ' ')}</label>\r\n                    {editableFields[key] ? (\r\n                        <input\r\n                            type=\"text\"\r\n                            name={key}\r\n                            value={updatedFields[key] || value}\r\n                            onChange={handleChange}\r\n                        />\r\n                    ) : (\r\n                        <input type=\"text\" value={value} readOnly />\r\n                    )}\r\n                    {!editableFields[key] && (\r\n                        <button onClick={() => handleEdit(key)}>Edit {key.replace('_', ' ')}</button>\r\n                    )}\r\n                </div>\r\n            ))}\r\n            <button onClick={handleSubmit}>Submit Changes</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LearnerProfile;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}